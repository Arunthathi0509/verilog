module full_adder(
    input a, b, cin,
    output sum, cout
);
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (cin & (a ^ b));
endmodule
module ripple_carry_adder_32bit(
    input [31:0] A, B,
    input cin,
    output [31:0] sum,
    output cout
);
    wire [31:0] carry; 
    full_adder FA0(
        .a(A[0]), 
        .b(B[0]), 
        .cin(cin), 
        .sum(sum[0]), 
        .cout(carry[0])
    );
    genvar i;
    generate
        for (i = 1; i < 32; i = i + 1) begin: ripple
            full_adder FA(
                .a(A[i]), 
                .b(B[i]), 
                .cin(carry[i-1]), 
                .sum(sum[i]), 
                .cout(carry[i])
            );
        end
    endgenerate

    assign cout = carry[31];  
endmodule

